from PIL import Image, ImageDraw, ImageFont
import os

__author__ = 'anddor'


class BoardImgGen(object):
    """When initialized, the class will contain an empty board. All further methods will modify this image."""

    def __init__(self, world_width, world_height, square_size=50):
        """initializes an empty board of the given width and height, with given square size."""
        super(BoardImgGen, self).__init__()
        self.square_size = square_size
        self.width = world_width
        self.height = world_height
        self.img = self.make_img(world_width, world_height, square_size)
        self.draw = ImageDraw.Draw(self.img)

    # make a blank image for the text, initialized to transparent text color

    def make_img(self, world_width, world_height, square_size):
        """returns an image file based on the current state"""
        img_height = world_height * square_size
        img_width = world_width * square_size
        img = Image.new('RGBA', (img_width, img_height), (255, 255, 255, 0))
        return img

    def draw_world(self):
        """draws the grid unto the image"""
        x = 0
        y = 0
        for y in range(self.width):
            for x in range(self.height):
                pos_x = x * self.square_size
                pos_y = y * self.square_size
                self.draw_square(pos_x, pos_y)

    def draw_square(self, x, y):
        """Draws a single square in the image"""

        # Draws a rectangle representing a square in the
        # game on the right location at the image
        rectangle = [(x, y), (x + self.square_size, y + self.square_size)]
        self.draw.rectangle(rectangle, (76, 77, 255, 255), (0, 0, 0, 255))

    def draw_open_closed(self, squares, char):
        """Draws the given character 'char' to all the locations contained in the 'squares' list"""
        color = (0, 0, 0, 255)
        font = ImageFont.truetype("/usr/share/fonts/truetype/droid/DroidSans.ttf", 25)
        size = 25 / 2
        for square in squares:
            y, x = square
            pos_x = (x * self.square_size + self.square_size // 2)
            pos_y = (y * self.square_size + self.square_size // 2)
            pos = (pos_x - (size // 2), pos_y - size)
            self.draw.text(pos, char, color, font=font)

    def show_img(self):
        """shows the image contained in the class"""
        self.img.show()

    def save(self, m, n, k):
        """saves the image contained in the class with the given file name"""
        file_path = os.getcwd()
        self.img.save(file_path + "/solutions/" + "egg_carton-" + m + n + k + ".PNG", "PNG")
