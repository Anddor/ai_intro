import os
import random
import math

__author__ = 'anddor'


def sa_algorithm(problem, temp, d_temp):
    p = problem.get_start  # p is the current solution, not the value
    start_temp = temp
    i = 0  # iteration number, for testing etc.
    while True and temp > 0:
        i += 1
        value = problem.obj_function(p)  # value of the current solution
        # print status:
        # progress = "=" * int(math.floor(value * 10))
        # left = " " * int(math.floor((1 - value) * 10))
        # print "Progress: [{} {}]".format(progress, left)
        # print "Iteration {}".format(i)
        if value >= problem.target:
            # If the value is "good enough", we return.
            return p

        neighbors = problem.generate_neighbors(p, 30)  # generates 30 neighbors of the given state p
        p_max = max(neighbors, key=problem.obj_function)  # p_max is the current best next solution
        # How much better the new solution is:
        q = (problem.obj_function(p_max) - value) / max(value, 0.00000001)  # max() to avoid divide by zero

        # the bounds for exploitation, higher temp gives more exploration:
        small_p = min(1, math.exp(-q / temp))

        x = random.random()
        if x > small_p:
            p = p_max  # exploit
        else:
            p = neighbors[random.randint(0, len(neighbors) - 1)]  # explore

        temp -= d_temp

    print("freeze")  # if no solution has been found before temp =< 0
    return p
